// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source client.go -destination mock/client.go -package mock Client
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	ethproofs "github.com/nmvalera/go-utils/ethproofs/client"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateCluster mocks base method.
func (m *MockClient) CreateCluster(ctx context.Context, req *ethproofs.CreateClusterRequest) (*ethproofs.CreateClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCluster", ctx, req)
	ret0, _ := ret[0].(*ethproofs.CreateClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCluster indicates an expected call of CreateCluster.
func (mr *MockClientMockRecorder) CreateCluster(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockClient)(nil).CreateCluster), ctx, req)
}

// CreateMachine mocks base method.
func (m *MockClient) CreateMachine(ctx context.Context, req *ethproofs.CreateMachineRequest) (*ethproofs.CreateMachineResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMachine", ctx, req)
	ret0, _ := ret[0].(*ethproofs.CreateMachineResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMachine indicates an expected call of CreateMachine.
func (mr *MockClientMockRecorder) CreateMachine(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMachine", reflect.TypeOf((*MockClient)(nil).CreateMachine), ctx, req)
}

// ListAWSPricing mocks base method.
func (m *MockClient) ListAWSPricing(ctx context.Context) ([]ethproofs.AWSInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAWSPricing", ctx)
	ret0, _ := ret[0].([]ethproofs.AWSInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAWSPricing indicates an expected call of ListAWSPricing.
func (mr *MockClientMockRecorder) ListAWSPricing(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAWSPricing", reflect.TypeOf((*MockClient)(nil).ListAWSPricing), ctx)
}

// ListClusters mocks base method.
func (m *MockClient) ListClusters(ctx context.Context) ([]ethproofs.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusters", ctx)
	ret0, _ := ret[0].([]ethproofs.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusters indicates an expected call of ListClusters.
func (mr *MockClientMockRecorder) ListClusters(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*MockClient)(nil).ListClusters), ctx)
}

// QueueProof mocks base method.
func (m *MockClient) QueueProof(ctx context.Context, req *ethproofs.QueueProofRequest) (*ethproofs.ProofResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueProof", ctx, req)
	ret0, _ := ret[0].(*ethproofs.ProofResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueProof indicates an expected call of QueueProof.
func (mr *MockClientMockRecorder) QueueProof(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueProof", reflect.TypeOf((*MockClient)(nil).QueueProof), ctx, req)
}

// StartProving mocks base method.
func (m *MockClient) StartProving(ctx context.Context, req *ethproofs.StartProvingRequest) (*ethproofs.ProofResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartProving", ctx, req)
	ret0, _ := ret[0].(*ethproofs.ProofResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartProving indicates an expected call of StartProving.
func (mr *MockClientMockRecorder) StartProving(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartProving", reflect.TypeOf((*MockClient)(nil).StartProving), ctx, req)
}

// SubmitProof mocks base method.
func (m *MockClient) SubmitProof(ctx context.Context, req *ethproofs.SubmitProofRequest) (*ethproofs.ProofResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitProof", ctx, req)
	ret0, _ := ret[0].(*ethproofs.ProofResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitProof indicates an expected call of SubmitProof.
func (mr *MockClientMockRecorder) SubmitProof(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitProof", reflect.TypeOf((*MockClient)(nil).SubmitProof), ctx, req)
}
